{
  "rules": [
    {
      "description": "Debug OAuth Issues",
      "triggers": [
        "oauth not working",
        "debug oauth",
        "troubleshoot auth",
        "token invalid"
      ],
      "actions": [
        {
          "type": "GENERATE_CODE",
          "options": {
            "language": "javascript",
            "filename": "oauth-debug.js",
            "template": "// OAuth 2.0 Debug Utilities for X API v2\n\nclass OAuthDebugger {\n  constructor() {\n    this.tokenStorageKey = 'x_api_tokens';\n  }\n\n  checkTokenStorage() {\n    console.group('Token Storage Check');\n    \n    try {\n      const rawTokenData = localStorage.getItem(this.tokenStorageKey);\n      \n      if (!rawTokenData) {\n        console.warn('❌ No tokens found in storage');\n        return { status: 'failed', reason: 'no_tokens' };\n      }\n      \n      const tokenData = JSON.parse(rawTokenData);\n      const checks = [\n        { name: 'access_token', valid: !!tokenData.access_token },\n        { name: 'refresh_token', valid: !!tokenData.refresh_token },\n        { name: 'expires_at', valid: !!tokenData.expires_at }\n      ];\n      \n      const failedChecks = checks.filter(check => !check.valid);\n      \n      if (failedChecks.length > 0) {\n        console.warn(`❌ Missing token properties: ${failedChecks.map(c => c.name).join(', ')}`);\n        return { status: 'failed', reason: 'invalid_token_data', failedChecks };\n      }\n      \n      const now = Date.now();\n      const timeRemaining = tokenData.expires_at - now;\n      \n      if (timeRemaining <= 0) {\n        console.warn(`❌ Token expired ${Math.abs(Math.round(timeRemaining / 1000 / 60))} minutes ago`);\n        return { status: 'expired', canRefresh: !!tokenData.refresh_token };\n      }\n      \n      return { status: 'valid', expiresIn: Math.round(timeRemaining / 1000 / 60) };\n    } catch (e) {\n      console.error('❌ Error checking tokens:', e);\n      return { status: 'failed', reason: 'unexpected_error', error: e.message };\n    }\n  }\n\n  async testApiCall() {\n    const tokenCheck = this.checkTokenStorage();\n    if (tokenCheck.status !== 'valid') {\n      return { status: 'failed', reason: 'invalid_token' };\n    }\n    \n    try {\n      const tokenData = JSON.parse(localStorage.getItem(this.tokenStorageKey));\n      const response = await fetch('https://api.x.com/2/users/me', {\n        headers: { 'Authorization': `Bearer ${tokenData.access_token}` }\n      });\n      \n      if (!response.ok) {\n        return { status: 'failed', httpStatus: response.status };\n      }\n      \n      return { status: 'success' };\n    } catch (e) {\n      return { status: 'failed', reason: 'request_error', error: e.message };\n    }\n  }\n}\n\nexport default new OAuthDebugger();"
          }
        }
      ]
    }
  ]
} 